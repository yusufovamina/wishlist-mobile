import { useState } from "react";
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  Alert,
  ActivityIndicator,
  StyleSheet,
  ImageBackground,
  Image,
} from "react-native";
import * as ImagePicker from "expo-image-picker";
import AsyncStorage from "@react-native-async-storage/async-storage";
import api from "../services/api";

// üìå –¢–∏–ø–∏–∑–∞—Ü–∏—è –ø—Ä–æ–ø—Å–æ–≤
interface GiftFormProps {
  onGiftAdded: () => void; // –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
}

const GiftForm: React.FC<GiftFormProps> = ({ onGiftAdded = () => {} }) => {

  const [name, setName] = useState("");
  const [price, setPrice] = useState("");
  const [category, setCategory] = useState("");
  const [image, setImage] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);

  // üìå –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –≥–∞–ª–µ—Ä–µ–µ –∏ –≤—ã–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const pickImage = async () => {
    const permission = await ImagePicker.requestMediaLibraryPermissionsAsync();
    if (!permission.granted) {
      Alert.alert("Permission required", "You need to allow access to your gallery.");
      return;
    }

    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsEditing: true,
      aspect: [4, 3],
      quality: 1,
    });

    if (!result.canceled) {
      setImage(result.assets[0].uri); // üî• –¢–µ–ø–µ—Ä—å `image` ‚Äì —Å—Ç—Ä–æ–∫–∞ (`uri`)
    }
  };

  // üìå –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
  const handleCreateGift = async () => {
    if (!name || !price || !category) {
      Alert.alert("Error", "Please fill all required fields.");
      return;
    }

    setIsLoading(true);

    try {
      const token = await AsyncStorage.getItem("token");
      if (!token) {
        Alert.alert("Unauthorized", "Please log in to add a gift.");
        setIsLoading(false);
        return;
      }

      const formData = new FormData();
      formData.append("name", name.trim());
      formData.append("price", price.toString()); // ‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫—É
      formData.append("category", category);

      if (image) {
        const response = await fetch(image);
        const blob = await response.blob(); // üî• –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º `uri` –≤ `Blob`
        
        formData.append("imageFile", blob, `photo_${Date.now()}.jpg`);
      }

      console.log("üì§ Sending FormData:", formData);

      const giftResponse = await api.post("/Gift", formData, {
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "multipart/form-data",
        },
        transformRequest: (data, headers) => {
          delete headers["Content-Type"]; // React Native —Å–∞–º –¥–æ–±–∞–≤–∏—Ç `boundary`
          return data;
        },
      });

      Alert.alert("Success", "Gift has been successfully added!");
      setName("");
      setPrice("");
      setCategory("");
      setImage(null);
      onGiftAdded(); // üìå –í—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤
    } catch (error) {
      console.error("‚ùå Error adding gift:", error);
      Alert.alert("Error", "Failed to add gift.");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <ImageBackground
      source={require("./assets/background.jpg")} // –í–∞—à —Ñ–æ–Ω–æ–≤—ã–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      style={styles.background}
    >
      <View style={styles.container}>
        <Text style={styles.title}>üéÅ Add a Gift</Text>

        <TextInput
          style={styles.input}
          placeholder="Gift Name"
          value={name}
          onChangeText={setName}
        />

        <TextInput
          style={styles.input}
          placeholder="Price ($)"
          keyboardType="numeric"
          value={price}
          onChangeText={setPrice}
        />

        <TextInput
          style={styles.input}
          placeholder="Category"
          value={category}
          onChangeText={setCategory}
        />

        {/* –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
        <TouchableOpacity style={styles.imagePicker} onPress={pickImage}>
          <Text style={styles.imagePickerText}>{image ? "Change Image" : "Pick an Image"}</Text>
        </TouchableOpacity>

        {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
        {image && <Image source={{ uri: image }} style={styles.imagePreview} />}

        {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞ */}
        <TouchableOpacity style={styles.createButton} onPress={handleCreateGift} disabled={isLoading}>
          {isLoading ? (
            <ActivityIndicator size="small" color="#fff" />
          ) : (
            <Text style={styles.buttonText}>Add Gift</Text>
          )}
        </TouchableOpacity>
      </View>
    </ImageBackground>
  );
};

const styles = StyleSheet.create({
  background: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    padding: 20,
  },
  container: {
    width: "100%", // –ó–∞–Ω–∏–º–∞–µ—Ç –≤—Å—é —à–∏—Ä–∏–Ω—É
    maxWidth: 600, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ (–¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –Ω–∞ –±–æ–ª—å—à–∏—Ö —ç–∫—Ä–∞–Ω–∞—Ö)
    padding: 20,
    alignItems: "center",
    backgroundColor: "rgba(255, 255, 255, 0.6)", // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ —Å—Ç–µ–∫–ª—è–Ω–Ω–æ–≥–æ –º–æ—Ä—Ñ–∏–∑–º–∞
    borderRadius: 15, // –°–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ —É–≥–ª—ã
  },
  title: {
    fontSize: 24,
    fontWeight: "bold",
    marginBottom: 20,
    color: "#6a0dad",
  },
  input: {
    width: "100%",
    padding: 15,
    marginVertical: 10,
    borderWidth: 1,
    borderColor: "#ddd",
    borderRadius: 8,
    backgroundColor: "rgba(255, 255, 255, 0.7)", // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
  },
  imagePicker: {
    backgroundColor: "#ddd",
    padding: 10,
    marginTop: 10,
    borderRadius: 8,
    alignItems: "center",
    width: "100%",
  },
  imagePickerText: {
    fontSize: 16,
    color: "#333",
  },
  imagePreview: {
    width: 150,
    height: 150,
    borderRadius: 10,
    marginTop: 10,
  },
  createButton: {
    backgroundColor: "#6a0dad",
    padding: 15,
    borderRadius: 8,
    alignItems: "center",
    marginTop: 10,
    width: "100%",
  },
  buttonText: {
    color: "white",
    fontSize: 18,
    fontWeight: "bold",
  },
});

export default GiftForm;
